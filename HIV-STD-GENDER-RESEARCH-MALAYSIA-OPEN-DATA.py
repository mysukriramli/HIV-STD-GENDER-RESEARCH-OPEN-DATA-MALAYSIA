# -*- coding: utf-8 -*-
"""Untitled55.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GDFwq6YhXqNZEfgDYTF-I3gcPuNbLfbG
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import numpy as np
from scipy.stats import ttest_ind, mannwhitneyu

# Load the dataset
URL_DATA_1 = 'https://storage.dosm.gov.my/sdg/sdg_03-3-1.parquet'
df1 = pd.read_parquet(URL_DATA_1)
df1['date'] = pd.to_datetime(df1['date'])

# Remove "Both" category
df1 = df1[df1['sex'] != 'Both']

# --- EDA for df1 (sdg_03-3-1) - Gender Disparity Focus ---
print("\n--- EDA for df1 (sdg_03-3-1) - Gender Disparity Focus ---")
print(df1.head())

# Set Seaborn style
sns.set(style="whitegrid")

# Line plot with Seaborn
plt.figure(figsize=(12, 8))
sns.lineplot(x='date', y='incidence', hue='sex', data=df1, palette='viridis', linewidth=2.5)
plt.title('Incidence Over Time by Sex', fontsize=16)
plt.xlabel('Date', fontsize=14)
plt.ylabel('Incidence', fontsize=14)
plt.xticks(rotation=45)
plt.legend(title='Sex', title_fontsize='13', fontsize='11')
plt.tight_layout()
plt.show()

# Interactive line plot with Plotly
fig = px.line(df1, x='date', y='incidence', color='sex', title='Interactive Incidence Over Time by Sex',
              labels={'date': 'Date', 'incidence': 'Incidence', 'sex': 'Sex'},
              template='plotly_dark')
fig.update_layout(title_font_size=20, legend_title_font_size=15)
fig.show()

# Box plot with Seaborn
plt.figure(figsize=(10, 8))
sns.boxplot(x='sex', y='incidence', data=df1, palette='viridis')
plt.title('Incidence Distribution by Sex', fontsize=16)
plt.xlabel('Sex', fontsize=14)
plt.ylabel('Incidence', fontsize=14)
plt.tight_layout()
plt.show()

male_incidence = df1[df1['sex'] == 'male']['incidence']
female_incidence = df1[df1['sex'] == 'female']['incidence']

t_statistic, p_value = ttest_ind(male_incidence, female_incidence, equal_var=False)
print(f"\nT-test: t-statistic = {t_statistic}, p-value = {p_value}")

u_statistic, p_value = mannwhitneyu(male_incidence, female_incidence)
print(f"\nMann-Whitney U test: u-statistic = {u_statistic}, p-value = {p_value}")

# Calculate male to female ratio
df1_pivot = df1.pivot_table(index='date', columns='sex', values='incidence', aggfunc='mean')
df1_pivot['male_female_ratio'] = df1_pivot['male'] / df1_pivot['female']

# Line plot for male to female ratio
plt.figure(figsize=(12, 8))
sns.lineplot(x=df1_pivot.index, y='male_female_ratio', data=df1_pivot, color='purple', linewidth=2.5)
plt.title('Male to Female Incidence Ratio Over Time', fontsize=16)
plt.xlabel('Date', fontsize=14)
plt.ylabel('Male to Female Ratio', fontsize=14)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

df1['year'] = df1['date'].dt.year
incidence_by_sex_year = df1.groupby(['year', 'sex'])['incidence'].mean().reset_index()

# Bar plot with Plotly
fig = px.bar(incidence_by_sex_year, x='year', y='incidence', color='sex', title='Incidence Rate by Sex and Year',
             labels={'year': 'Year', 'incidence': 'Incidence', 'sex': 'Sex'},
             template='plotly_dark')
fig.update_layout(title_font_size=20, legend_title_font_size=15)
fig.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from scipy.stats import ttest_ind, mannwhitneyu, f_oneway, kruskal, shapiro, normaltest
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.holtwinters import ExponentialSmoothing
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score
import plotly.express as px

# Load the datasets
URL_DATA_1 = 'https://storage.dosm.gov.my/sdg/sdg_03-3-1.parquet'
df1 = pd.read_parquet(URL_DATA_1)
if 'date' in df1.columns:
    df1['date'] = pd.to_datetime(df1['date'])

URL_DATA_2 = 'https://storage.data.gov.my/healthcare/std_state.parquet'
df2 = pd.read_parquet(URL_DATA_2)
if 'date' in df2.columns:
    df2['date'] = pd.to_datetime(df2['date'])

URL_DATA_3 = 'https://storage.dosm.gov.my/hies/hh_income_state.parquet'
df3 = pd.read_parquet(URL_DATA_3)
if 'year' in df3.columns:
    df3['year'] = pd.to_datetime(df3['year'], format='%Y')


# --- EDA for df1 (sdg_03-3-1) ---
print("\n--- EDA for df1 (sdg_03-3-1) ---")
print(df1.head())
print(df1.info())
print(df1.describe())

if 'date' in df1.columns and 'incidence' in df1.columns and 'sex' in df1.columns:
    plt.figure(figsize=(10, 6))
    sns.lineplot(x='date', y='incidence', hue='sex', data=df1)
    plt.title('Incidence Over Time by Sex')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

 # Time Series Analysis (Advanced)
    incidence_data = df1.set_index('date')['incidence']

    # ARIMA Forecasting
    try:
        model = ARIMA(incidence_data, order=(5, 2, 0))  # Example order, tune as needed
        model_fit = model.fit()
        forecast = model_fit.forecast(steps=5)
        print("\nARIMA Forecast:\n", forecast)

        plt.figure(figsize=(10, 6))
        plt.plot(incidence_data.index, incidence_data.values, label='Observed')
        plt.plot(forecast.index, forecast.values, label='Forecast', color='red')
        plt.title('Incidence Forecast using ARIMA')
        plt.legend()
        plt.xticks(rotation=45)
        plt.tight_layout()
        plt.show()

    except Exception as e:
        print(f"Error in ARIMA: {e}")

    # Holt-Winters Forecasting
    try:
        model = ExponentialSmoothing(incidence_data, trend="add", seasonal="add", seasonal_periods=1)
        model_fit = model.fit()
        forecast = model_fit.forecast(steps=5)
        print("\nHolt-Winters Forecast:\n", forecast)

        plt.figure(figsize=(10, 6))
        plt.plot(incidence_data.index, incidence_data.values, label='Observed')
        plt.plot(forecast.index, forecast.values, label='Forecast', color='red')
        plt.title('Incidence Forecast using Holt-Winters')
        plt.legend()
        plt.xticks(rotation=45)
        plt.tight_layout()
        plt.show()

    except Exception as e:
        print(f"Error in Holt-Winters: {e}")

    #... (Intervention Analysis, External Regressors - add if you have the data)

# --- EDA for df2 (std_state) ---
print("\n--- EDA for df2 (std_state) ---")
print(df2.head())
print(df2.info())
print(df2.describe())

if 'date' in df2.columns and 'incidence' in df2.columns and 'state' in df2.columns and 'disease' in df2.columns and 'cases' in df2.columns:
    plt.figure(figsize=(10, 6))
    sns.lineplot(x='date', y='incidence', hue='state', data=df2[df2['disease'] == 'aids'])  # Example disease
    plt.title('Incidence Over Time by State (AIDS)')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

    #... (rest of the visualizations and statistical tests for df2)

    disease_of_interest = 'aids'  # Example, change as needed
    disease_data = df2[df2['disease'] == disease_of_interest].copy()

    if not disease_data.empty:
        disease_data['time_index'] = (disease_data['date'] - disease_data['date'].min()).dt.days
        X = disease_data[['time_index']]
        y = disease_data['incidence']
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
        model = LinearRegression()
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)
        r2 = r2_score(y_test, y_pred)
        print(f"\nLinear Regression R-squared: {r2}")

        plt.figure(figsize=(10, 6))
        plt.scatter(X_test, y_test, label='Actual Incidence')
        plt.plot(X_test, y_pred, color='red', label='Predicted Incidence')
        plt.title(f'AIDS Incidence Prediction (Linear Regression)')
        plt.xlabel('Time Index (Days)')
        plt.ylabel('Incidence')
        plt.legend()
        plt.tight_layout()
        plt.show()

# --- EDA for df3 (hh_income_state) ---
print("\n--- EDA for df3 (hh_income_state) ---")
print(df3.head())
print(df3.info())
print(df3.describe())

if 'year' in df3.columns and 'income_mean' in df3.columns and 'state' in df3.columns and 'income_median' in df3.columns:
    plt.figure(figsize=(10, 6))
    sns.lineplot(x='year', y='income_mean', hue='state', data=df3)
    plt.title('Mean Household Income by State Over Time')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

    #... (rest of the visualizations and statistical tests for df3)

    def gini(x):
        x = np.asarray(x)
        sorted_x = np.sort(x)
        n = len(x)
        cumsum_x = np.cumsum(sorted_x)
        return (n + 1 - 2 * np.sum(cumsum_x) / cumsum_x[-1]) / n

    gini_coefficient_mean = gini(df3['income_mean'].dropna())
    gini_coefficient_median = gini(df3['income_median'].dropna())

    print(f"\nGini Coefficient (Mean): {gini_coefficient_mean}")
    print(f"\nGini Coefficient (Median): {gini_coefficient_median}")

    #... (rest of the analysis for df3)


# --- General Suggestions for All DataFrames ---

# Data Cleaning (Examples - Adapt for all dataframes)
print("\n--- Data Cleaning ---")

# df1
print("\ndf1:")
print("Missing values before cleaning:\n", df1.isnull().sum())
# df1['incidence'].fillna(df1['incidence'].mean(), inplace=True)  # Example imputation
print("Missing values after cleaning:\n", df1.isnull().sum())

# df2
print("\ndf2:")
print("Missing values before cleaning:\n", df2.isnull().sum())
#... (Add cleaning steps as needed)

# df3
print("\ndf3:")
print("Missing values before cleaning:\n", df3.isnull().sum())
#... (Add cleaning steps as needed)


# Feature Engineering (Examples - Adapt for all dataframes)
print("\n--- Feature Engineering ---")

# df1
print("\ndf1:")
df1['year'] = df1['date'].dt.year
df1['month'] = df1['date'].dt.month
print(df1.head())

# df2
print("\ndf2:")
#... (Add feature engineering steps as needed)

# df3
print("\ndf3:")
#... (Add feature engineering steps as needed)


# Interactive Visualizations (Examples using Plotly - Adapt for all dataframes)
print("\n--- Interactive Visualizations ---")

# df1
print("\ndf1:")
fig = px.line(df1, x='date', y='incidence', color='sex', title='Interactive Incidence Over Time by Sex')
fig.show()
fig = px.bar(df1, x='year', y='incidence', color='sex', title='Interactive Incidence by Year and Sex')
fig.show()

# df2
print("\ndf2:")
fig = px.line(df2, x='date', y='incidence', color='state', facet_col='disease',
              title='Interactive Incidence Over Time by State and Disease')
fig.show()
fig = px.bar(df2, x='state', y='incidence', color='disease',
             title='Interactive Incidence by State and Disease (Latest Year)',
             animation_frame='date')
fig.show()

# df3
print("\ndf3:")
fig = px.line(df3, x='date', y='income_mean', color='state',
              title='Interactive Mean Household Income by State Over Time')
fig.show()
fig = px.bar(df3, x='state', y='income_mean',
             title='Interactive Mean Household Income by State (Latest Year)',
             animation_frame='date')
fig.show()

# Storytelling (Examples - Adapt for all dataframes)
print("\n--- Storytelling ---")

# df1
print("\ndf1:")
print("Key Observations:")
print("- There is a statistically significant difference in incidence rates between males and females (p-value < 0.05 from t-test). Males have a consistently higher incidence.")
print("- Incidence rates appear to fluctuate over time, but there's no clear overall upward or downward trend.")
print("- The ratio of male to female incidence has remained relatively stable over the observed period.")
print("- ARIMA and Holt-Winters forecasting suggest a slight decrease in overall incidence in the next 5 years, but the confidence intervals are wide.")

print("\nFurther Analysis Recommendations:")
print("- Investigate potential external factors (e.g., public health programs, changes in reporting methods) that may be influencing incidence rates.")
print("- Explore seasonality patterns in the data to understand the fluctuations better.")
print("- Compare the forecasting performance of ARIMA and Holt-Winters models using appropriate metrics (e.g., RMSE, MAE).")
print("- If more data becomes available, consider using more advanced time series models or incorporating external regressors for improved forecasting accuracy.")

# df2
print("\ndf2:")
print("Key Observations:")
print("- Incidence rates for different diseases vary significantly across states.")
print("- Some states show a clear downward trend in incidence for certain diseases, while others remain stable or show an increase.")
print("- There might be a correlation between the incidence of different diseases, suggesting potential shared risk factors.")

print("\nFurther Analysis Recommendations:")
print("- Investigate the factors contributing to the differences in incidence rates between states.")
print("- Analyze the impact of public health interventions on disease trends.")
print("- Explore the correlation between diseases further to identify potential co-morbidities or shared causes.")

# df3
print("\ndf3:")
print("Key Observations:")
print("- Mean household income has generally increased over time in most states.")
print("- There are significant disparities in income levels between states.")
print("- The distribution of income within states is skewed, with a small percentage of households having very high incomes.")

print("\nFurther Analysis Recommendations:")
print("- Analyze the factors contributing to income disparities between states.")
print("- Investigate the relationship between income and other socioeconomic factors, such as education and employment.")
print("- Explore the impact of government policies on income distribution.")

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from scipy.stats import ttest_ind, mannwhitneyu, f_oneway, kruskal, shapiro, normaltest

# Load the datasets
URL_DATA_1 = 'https://storage.dosm.gov.my/sdg/sdg_03-3-1.parquet'
df1 = pd.read_parquet(URL_DATA_1)
if 'date' in df1.columns:
    df1['date'] = pd.to_datetime(df1['date'])

URL_DATA_2 = 'https://storage.data.gov.my/healthcare/std_state.parquet'
df2 = pd.read_parquet(URL_DATA_2)
if 'date' in df2.columns:
    df2['date'] = pd.to_datetime(df2['date'])

URL_DATA_3 = 'https://storage.dosm.gov.my/hies/hh_income_state.parquet'
df3 = pd.read_parquet(URL_DATA_3)
if 'year' in df3.columns:
    df3['year'] = pd.to_datetime(df3['year'], format='%Y')


# --- EDA for df1 (sdg_03-3-1) ---
print("\n--- EDA for df1 (sdg_03-3-1) ---")
print(df1.head())
print(df1.info())
print(df1.describe())

if 'date' in df1.columns and 'incidence' in df1.columns and 'sex' in df1.columns:
    plt.figure(figsize=(10, 6))
    sns.lineplot(x='date', y='incidence', hue='sex', data=df1)
    plt.title('Incidence Over Time by Sex')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

    plt.figure(figsize=(10, 6))
    sns.barplot(x='date', y='incidence', hue='sex', data=df1)
    plt.title('Incidence by Year and Sex')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

    plt.figure(figsize=(12, 8))
    sns.boxplot(x='sex', y='incidence', data=df1)
    plt.title('Incidence Distribution by Sex')
    plt.tight_layout()
    plt.show()

    # Deeper Dive into Sex Differences
    male_incidence = df1[df1['sex'] == 'male']['incidence']
    female_incidence = df1[df1['sex'] == 'female']['incidence']

    male_normality = shapiro(male_incidence).pvalue > 0.05
    female_normality = shapiro(female_incidence).pvalue > 0.05

    if male_normality and female_normality:
        t_stat, p_value = ttest_ind(male_incidence, female_incidence)
        print(f"\nT-test: t-statistic = {t_stat}, p-value = {p_value}")
    else:
        u_stat, p_value = mannwhitneyu(male_incidence, female_incidence)
        print(f"\nMann-Whitney U test: U statistic = {u_stat}, p-value = {p_value}")

    df1['incidence_change'] = df1.groupby('sex')['incidence'].diff()
    plt.figure(figsize=(10, 6))
    sns.lineplot(x='date', y='incidence_change', hue='sex', data=df1)
    plt.title('Change in Incidence Over Time by Sex')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

    male_data = df1[df1['sex'] == 'male'].set_index('date')['incidence']
    female_data = df1[df1['sex'] == 'female'].set_index('date')['incidence']

    incidence_ratio = male_data / female_data
    plt.figure(figsize=(10, 6))
    incidence_ratio.plot()
    plt.title('Ratio of Male to Female Incidence')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

    incidence_data = df1.set_index('date')['incidence']
    decomposition = seasonal_decompose(incidence_data, model='additive', period=1)
    decomposition.plot()
    plt.tight_layout()
    plt.show()

    plot_acf(incidence_data, lags=5)
    plt.tight_layout()
    plt.show()
    plot_pacf(incidence_data, lags=5)
    plt.tight_layout()
    plt.show()


# --- EDA for df2 (std_state) ---
print("\n--- EDA for df2 (std_state) ---")
print(df2.head())
print(df2.info())
print(df2.describe())

if 'date' in df2.columns and 'incidence' in df2.columns and 'state' in df2.columns and 'disease' in df2.columns and 'cases' in df2.columns:
    plt.figure(figsize=(10, 6))
    sns.lineplot(x='date', y='incidence', hue='state', data=df2[df2['disease'] == 'aids']) # Example disease
    plt.title('Incidence Over Time by State (AIDS)')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

    plt.figure(figsize=(12, 8))
    sns.barplot(x='state', y='incidence', hue='disease', data=df2[df2['date'] == df2['date'].max()]) # Example: latest date
    plt.title('Incidence by State (Latest Year)')
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    plt.show()

    disease_of_interest = 'aids'
    disease_data = df2[df2['disease'] == disease_of_interest]

    if len(disease_data['state'].unique()) > 2:
        if normaltest(disease_data['incidence']).pvalue > 0.05:
            f_stat, p_value = f_oneway(*[group['incidence'].values for name, group in disease_data.groupby('state')])
            print(f"\nANOVA: F-statistic = {f_stat}, p-value = {p_value}")
        else:
            k_stat, p_value = kruskal(*[group['incidence'].values for name, group in disease_data.groupby('state')])
            print(f"\nKruskal-Wallis: H statistic = {k_stat}, p-value = {p_value}")

    plt.figure(figsize=(10, 6))
    sns.scatterplot(x='cases', y='incidence', hue='disease', data=df2)
    plt.title('Incidence vs. Cases')
    plt.tight_layout()
    plt.show()


# --- EDA for df3 (hh_income_state) ---
print("\n--- EDA for df3 (hh_income_state) ---")
print(df3.head())
print(df3.info())
print(df3.describe())

if 'year' in df3.columns and 'income_mean' in df3.columns and 'state' in df3.columns and 'income_median' in df3.columns:
    plt.figure(figsize=(10, 6))
    sns.lineplot(x='year', y='income_mean', hue='state', data=df3)
    plt.title('Mean Household Income by State Over Time')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

    plt.figure(figsize=(12, 8))
    sns.barplot(x='state', y='income_mean', data=df3[df3['year'] == df3['year'].max()]) # Latest year
    plt.title('Mean Household Income by State (Latest Year)')
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    plt.show()

    plt.figure(figsize=(10, 6))
    sns.histplot(df3['income_mean'].dropna(), kde=True) # Drop NA values before plotting
    plt.title('Distribution of Mean Household Income')
    plt.tight_layout()
    plt.show()

import pandas as pd
import plotly.express as px
import numpy as np
from sklearn.linear_model import LinearRegression

# Load the datasets
URL_DATA_1 = 'https://storage.dosm.gov.my/sdg/sdg_03-3-1.parquet'
df1 = pd.read_parquet(URL_DATA_1)
df1['date'] = pd.to_datetime(df1['date'])

URL_DATA_2 = 'https://storage.data.gov.my/healthcare/std_state.parquet'
df2 = pd.read_parquet(URL_DATA_2)
df2['date'] = pd.to_datetime(df2['date'])
df2['disease'] = df2['disease'].str.lower()

URL_DATA_3 = 'https://storage.dosm.gov.my/hies/hh_income_state.parquet'
df3 = pd.read_parquet(URL_DATA_3)
df3['date'] = pd.to_datetime(df3['date'])
df3['year'] = df3['date'].dt.year

# Standardize state names
def standardize_state_names(df, state_col='state'):
    if state_col in df.columns:
        df[state_col] = df[state_col].str.lower().str.replace(r'[^\w\s]', '', regex=True)
        df[state_col] = df[state_col].str.replace('n. sembilan', 'negeri sembilan', regex=False)
    return df

df2 = standardize_state_names(df2)
df3 = standardize_state_names(df3)

# Process HIV Incidence
df1_both = df1[df1['sex'] == 'both'].copy()
df1_both['disease'] = 'hiv'
df1_both = df1_both.rename(columns={'incidence': 'hiv_incidence'})
df1_both['year'] = df1_both['date'].dt.year

# Aggregate yearly data
df1_yearly = df1_both.groupby('year', as_index=False)['hiv_incidence'].mean()

# Fit a linear model for future projections
X = df1_yearly[['year']]
y = df1_yearly['hiv_incidence']
model = LinearRegression()
model.fit(X, y)

future_years = np.arange(2020, 2036).reshape(-1, 1)
future_predictions = model.predict(future_years)

future_df = pd.DataFrame({'year': future_years.flatten(), 'hiv_incidence': future_predictions})

df1_full = pd.concat([df1_yearly, future_df], ignore_index=True)

# Plot historical and projected HIV incidence
fig = px.line(df1_full, x='year', y='hiv_incidence', title='HIV Incidence with Future Projection',
              labels={'hiv_incidence': 'Average HIV Incidence'}, markers=True)

fig.add_scatter(x=future_df['year'], y=future_df['hiv_incidence'], mode='lines', name='Projected', line=dict(dash='dash'))
fig.show()

import pandas as pd
import plotly.express as px

# Load the datasets
URL_DATA_1 = 'https://storage.dosm.gov.my/sdg/sdg_03-3-1.parquet'
df1 = pd.read_parquet(URL_DATA_1)
df1['date'] = pd.to_datetime(df1['date'])

URL_DATA_2 = 'https://storage.data.gov.my/healthcare/std_state.parquet'
df2 = pd.read_parquet(URL_DATA_2)
df2['date'] = pd.to_datetime(df2['date'])
df2['disease'] = df2['disease'].str.lower()  # Standardize disease names

URL_DATA_3 = 'https://storage.dosm.gov.my/hies/hh_income_state.parquet'
df3 = pd.read_parquet(URL_DATA_3)
df3['date'] = pd.to_datetime(df3['date'])  # Ensure 'date' is in datetime format
df3['year'] = df3['date'].dt.year  # Extract year

# --- State Name Standardization ---
def standardize_state_names(df, state_col='state'):
    if state_col in df.columns:
        df[state_col] = df[state_col].str.lower().str.replace(r'[^\w\s]', '', regex=True)
        df[state_col] = df[state_col].str.replace('n. sembilan', 'negeri sembilan', regex=False)
        df[state_col] = df[state_col].str.replace('w. persekutuan kuala lumpur', 'w. persekutuan kuala lumpur', regex=False)
        df[state_col] = df[state_col].str.replace('w. persekutuan labuan', 'w. persekutuan labuan', regex=False)
        df[state_col] = df[state_col].str.replace('w. persekutuan putrajaya', 'w. persekutuan putrajaya', regex=False)
    return df

df2 = standardize_state_names(df2)
df3 = standardize_state_names(df3)

# --- HIV Incidence Processing ---
df1_both = df1[df1['sex'] == 'both'].copy()
df1_both['disease'] = 'hiv'
df1_both = df1_both.rename(columns={'incidence': 'hiv_incidence'})

# --- Cross-Data Visualizations ---

## **1. HIV Incidence and Disease Prevalence (Yearly Average)**
df1_both['year'] = df1_both['date'].dt.year
df1_yearly = df1_both.groupby('year', as_index=False)['hiv_incidence'].mean()

df2['year'] = df2['date'].dt.year
df2_yearly = df2.groupby(['year', 'disease'], as_index=False)['incidence'].mean()

df_merged_disease = pd.merge(df2_yearly, df1_yearly, on='year', how='inner')

fig = px.line(df_merged_disease, x='year', y='incidence', color='disease',
              title='HIV Incidence vs. Other Diseases Incidence (Yearly Average)',
              labels={'hiv_incidence': 'Average HIV Incidence', 'incidence': 'Other Diseases Incidence'},
              hover_data=['year'])
fig.show()
## **2. HIV Incidence Over Time vs. Household Income**
df1_both_yearly = df1_both.groupby('year', as_index=False)['hiv_incidence'].mean()

fig = px.line(df3, x='year', y='income_mean', color='state',
              title='Mean Household Income and Average HIV Incidence Over Time')

fig.add_scatter(x=df1_both_yearly['year'], y=df1_both_yearly['hiv_incidence'], name='Average HIV Incidence', mode='lines', yaxis='y2')
fig.update_layout(yaxis2={'title': 'Average HIV Incidence', 'overlaying': 'y', 'side': 'right'})
fig.show()

## **3. Quadrant Chart: HIV Incidence vs. Household Income**
df_income_merged = pd.merge(df3, df1_both_yearly, on='year', how='inner')

fig = px.scatter(df_income_merged, x='income_mean', y='hiv_incidence', color='state',
                 title='Quadrant: Average HIV Incidence vs. Mean Household Income by State (Per Year)',
                 labels={'income_mean': 'Mean Household Income', 'hiv_incidence': 'Average HIV Incidence'},
                 hover_data=['year'])

# Add quadrant lines
fig.add_hline(y=df_income_merged['hiv_incidence'].mean(), line_dash="dash", line_color="black")
fig.add_vline(x=df_income_merged['income_mean'].mean(), line_dash="dash", line_color="black")

fig.show()

## **4. Disease Prevalence and Household Income**
df2_latest = df2[df2['date'] == df2['date'].max()].copy()
df2_latest['year'] = df2_latest['date'].dt.year

merged_on_state_only = False

try:
    df_merged_income_disease = pd.merge(df2_latest, df3, on=['year', 'state'], how='inner')
except KeyError:
    print("Warning: Initial merge failed. Attempting merge on 'state' only.")
    df_merged_income_disease = pd.merge(df2_latest, df3, on=['state'], how='inner')
    merged_on_state_only = True

df_merged_income_disease.dropna(subset=['state'], inplace=True)

if merged_on_state_only:
    df_merged_income_disease = df_merged_income_disease.sort_values('date', ascending=False).groupby(['state', 'year']).first().reset_index()

fig = px.bar(df_merged_income_disease, x='state', y='incidence', color='disease',
             title='Disease Incidence by State (Latest Year)',
             labels={'incidence': 'Incidence'})
fig.show()

import pandas as pd
import plotly.express as px
import numpy as np
from sklearn.linear_model import LinearRegression
from statsmodels.tsa.holtwinters import ExponentialSmoothing
import seaborn as sns
import matplotlib.pyplot as plt

# Load the datasets
URL_DATA_1 = 'https://storage.dosm.gov.my/sdg/sdg_03-3-1.parquet'
df1 = pd.read_parquet(URL_DATA_1)
df1['date'] = pd.to_datetime(df1['date'])
df1['year'] = df1['date'].dt.year

URL_DATA_3 = 'https://storage.dosm.gov.my/hies/hh_income_state.parquet'
df3 = pd.read_parquet(URL_DATA_3)
df3['date'] = pd.to_datetime(df3['date'])
df3['year'] = df3['date'].dt.year

# Filter data from 2020 onwards
df1 = df1[df1['year'] >= 2020]
df3 = df3[df3['year'] >= 2020]

# Ensure 'state' exists in df1 by merging with df3 (which contains state information)
df1 = df1.merge(df3[['state', 'year']], on='year', how='left')

# Aggregate yearly data
df1_both = df1[df1['sex'] == 'both'].copy()
df1_both = df1_both.rename(columns={'incidence': 'hiv_incidence'})
df1_yearly = df1_both.groupby(['year', 'state'], as_index=False)['hiv_incidence'].mean()
df3_yearly = df3.groupby(['year', 'state'], as_index=False)['income_mean'].mean()

# Merge datasets
df_combined = pd.merge(df1_yearly, df3_yearly, on=['year', 'state'], how='inner')

# --- 1. Heatmap for HIV Incidence vs. Household Income (State-wise) ---
plt.figure(figsize=(12, 6))
pivot_table = df_combined.pivot(index='state', columns='year', values='hiv_incidence')
sns.heatmap(pivot_table, cmap='coolwarm', annot=True, fmt='.2f', linewidths=0.5)
plt.title('HIV Incidence by State (2020 Onward)')
plt.xlabel('Year')
plt.ylabel('State')
plt.show()

# --- 2. Animated Bubble Chart (State-wise Trends) ---
fig = px.scatter(df_combined, x='income_mean', y='hiv_incidence', size='hiv_incidence', color='state',
                 animation_frame='year', animation_group='state',
                 title='HIV Incidence vs Household Income (2020-2035)',
                 labels={'income_mean': 'Household Income', 'hiv_incidence': 'HIV Incidence'})
fig.show()

# --- 3. Dual-Axis Line Chart with Future Projections ---

def forecast_series(df, value_col, periods=10):
    model = ExponentialSmoothing(df[value_col], trend='add', seasonal=None, damped_trend=True).fit()
    future_years = list(range(df['year'].max() + 1, df['year'].max() + 1 + periods))
    forecast_values = model.forecast(periods)
    return pd.DataFrame({'year': future_years, value_col: forecast_values})

# Project HIV incidence and income_mean
hiv_forecast = forecast_series(df1_yearly.groupby('year', as_index=False)['hiv_incidence'].mean(), 'hiv_incidence')
income_forecast = forecast_series(df3_yearly.groupby('year', as_index=False)['income_mean'].mean(), 'income_mean')

df1_full = pd.concat([df1_yearly.groupby('year', as_index=False)['hiv_incidence'].mean(), hiv_forecast])
df3_full = pd.concat([df3_yearly.groupby('year', as_index=False)['income_mean'].mean(), income_forecast])

fig = px.line(df3_full, x='year', y='income_mean', title='Projected Household Income vs HIV Incidence (2020-2035)')
fig.add_scatter(x=df1_full['year'], y=df1_full['hiv_incidence'], name='HIV Incidence', mode='lines', yaxis='y2')
fig.add_scatter(x=hiv_forecast['year'], y=hiv_forecast['hiv_incidence'], mode='lines', name='Projected HIV', line=dict(dash='dot'))
fig.update_layout(yaxis2={'title': 'HIV Incidence', 'overlaying': 'y', 'side': 'right'})
fig.show()